
package Server;


import Bot.*;
import java.awt.Dimension;
import java.util.*;

/**
 * This class was generated by a SmartGuide.
 * 
 */
public class BotHandler {
        public Server server;

/**
 * This method was created by a SmartGuide.
 * @param parent Server.Server
 */
public BotHandler (Server parent) {
	server = parent;
}

public boolean Cloak(boolean engagingcloakingtrueorfalse, Bot bot) 
{
	int id;
	id = server.botlist.indexOf(bot);
        Status stat = (Status) server.statuslist.elementAt(id);

//	server.text.append("botcloakvalue="+engagingcloakingtrueorfalse+"\n");

	if (engagingcloakingtrueorfalse) {
		if ((!stat.iscloaked) && (stat.cloaktimer==0)) {
			stat.iscloaked = true;
//			server.text.append("bot" + id + " cloaked\n");
		} else {
			return false;
		}
	} else {
		stat.iscloaked=false;
//		server.text.append("bot" + id + " decloaked\n");
	}

	return true;
}

/**
 * This method was created by a SmartGuide.
 */
public boolean Drive (double dir, Bot bot) {
        Status stat;
	int id;
	
	id = server.botlist.indexOf(bot);
        stat = (Status) server.statuslist.elementAt(id);
        if (stat.battery < 0) return false;

        /* reduce numbers to between 0 - 2PI */
        if (dir > (double) java.lang.Math.PI*2 || dir < (double) -java.lang.Math.PI*2) {
                dir = dir % ((double)java.lang.Math.PI*2);
        }
        if (dir < 0) {
                dir += (double) java.lang.Math.PI*2;
        }

        stat.speed2 = 5;
	stat.dir = dir;
        stat.dir_vx = (double) java.lang.Math.cos(dir);
        stat.dir_vy = (double) java.lang.Math.sin(dir);

	stat.momentum_x2 = stat.dir_vx*stat.speed2;
	stat.momentum_y2 = stat.dir_vy*stat.speed2;
	stat.force_x = stat.dir_vx*stat.acceleration;
	stat.force_y = stat.dir_vy*stat.acceleration;

	return true;
}
/**
 * This method was created by a SmartGuide.
 */
public boolean Drive (double x, double y, Bot bot) {
        return Drive(x, y, 5, bot);
}

public boolean Drive (double x, double y, double speed, Bot bot) {
        Status stat;
	int id;
	
	id = server.botlist.indexOf(bot);
	
        stat = (Status) server.statuslist.elementAt(id);
        if (stat.battery < 0) return false;
        if (speed > stat.max_speed) return false;

        stat.speed2 = speed;

        /* convert to dir, since dir is used internally */
        if (x == 0) {
                if (y > 0) stat.dir = (double) java.lang.Math.PI/2;
                if (y < 0) stat.dir = (double) java.lang.Math.PI*3/2;
                /* assuming vector (0,0) means allstop */
                if (y == 0) {
                        /* since vector (0,0) is logistically an
                         * identity vector, don't change stat.dir */
                        stat.speed2 = 0.0f;
                        return true;
                }
        } else if (y == 0) {
                if (x > 0) stat.dir = (double) 0.0;
                else if (x < 0) stat.dir = (double) java.lang.Math.PI;
        } else {
                stat.dir = (double) java.lang.Math.atan(y/x);
                if (x < 0) stat.dir += (double) java.lang.Math.PI;
                else if (x > 0 && y < 0) stat.dir += (double) java.lang.Math.PI*2;
        }

        /* vector is used only for drawing (I think) */
        stat.dir_vx = (double) java.lang.Math.cos(stat.dir);
        stat.dir_vy = (double) java.lang.Math.sin(stat.dir);

	stat.momentum_x2 = stat.dir_vx*stat.speed2;
	stat.momentum_y2 = stat.dir_vy*stat.speed2;

        double force;
	if (speed != 0) {
		stat.force_x = stat.momentum_x2-stat.momentum_x;
		stat.force_y = stat.momentum_y2-stat.momentum_y;
		/* normalize force vector */
		force = server.linedist(0, 0, stat.force_x, stat.force_y);
                stat.force_x = (double) (stat.force_x/force);
                stat.force_y = (double) (stat.force_y/force);
		/* scale force vector by acceleration */
		stat.force_x = stat.force_x*stat.acceleration;
		stat.force_y = stat.force_y*stat.acceleration;
	} else {
		stat.force_x = stat.momentum_x2-stat.momentum_x;
		stat.force_y = stat.momentum_y2-stat.momentum_y;
		force = server.linedist(0, 0, stat.force_x, stat.force_y);
                stat.force_x = (double) (stat.force_x/force);
                stat.force_y = (double) (stat.force_y/force);
		stat.force_x = stat.force_x*stat.deceleration;
		stat.force_y = stat.force_y*stat.deceleration;
	}

	return true;
}

/**
 * This method was created by a SmartGuide.
 */
public int Fire (double dir, Bot bot) {
	int id;
	id = server.botlist.indexOf(bot);
        Status stat = (Status) server.statuslist.elementAt(id);
        Projectile projectile;

	if (stat.fired) return -1;
        if (stat.gunheat >= stat.overheat) return -1;
	if (stat.iscloaked) return -1;

	if (stat.num_proj >= stat.max_proj) {
		return -1;
	} else {
		stat.num_proj++;
                stat.gunheat += 10;
		stat.fired = true;
	}

        /* reduce numbers to between 0 - +2PI */
        if (dir > (double) java.lang.Math.PI*2 || dir < (double) -java.lang.Math.PI*2) {
                dir = dir % ((double)java.lang.Math.PI*2);
        }
        if (dir < 0) {
                dir += (double) java.lang.Math.PI*2;
        }

        projectile = new Projectile(id, dir, stat.x0, stat.y0);
	projectile.objID = server.objIDCount++;
	projectile.ownerBotName = stat.name;

	/* add to projectile log */
	stat.projectilelist.addElement(projectile);
	/* add to server */
	server.projectilelist.addElement(projectile);
	server.projectileindex++;

	/* return projectile log index */
	return stat.projectileindex++;
}

public int Fire (double a, double b, Bot bot) {
	int id;
        double dir, x, y;

        /* init the dir */
        dir = 0;
        x = a;
        y = b;
	
	id = server.botlist.indexOf(bot);
        Status stat = (Status) server.statuslist.elementAt(id);

        Projectile projectile;

	if (stat.fired) return -1;
        if (stat.gunheat >= stat.overheat) return -1;
	if (stat.iscloaked) return -1;

	if (stat.num_proj >= stat.max_proj) {
		return -1;
	} else {
		stat.num_proj++;
                stat.gunheat += 10;
		stat.fired = true;
	}

        // 10 is used for speed
        if (x == 0) {
                if (y > 0) dir = (double) java.lang.Math.PI/2;
                else if (y < 0) dir = (double) java.lang.Math.PI*3/2;
                /* Sorry, no suicides allowed in the game */
                else if (y == 0)  return -1;
        } else if (y == 0) {
                if (x > 0) dir = (double) 0.0;
                else if (x < 0) dir = (double) java.lang.Math.PI;
        } else {
                dir = (double) java.lang.Math.atan(y/x);
                if (x < 0) dir += (double) java.lang.Math.PI;
                else if (x > 0 && y < 0) dir += (double) java.lang.Math.PI*2;
        }

        projectile = new Projectile(id, dir, stat.x0, stat.y0);
	projectile.objID = server.objIDCount++;
	projectile.ownerBotName = stat.name;

	/* add to projectile log */
	stat.projectilelist.addElement(projectile);
	/* add to server */
	server.projectilelist.addElement(projectile);
	server.projectileindex++;

	/* return projectile log index */
	return stat.projectileindex++;
}

public Info getProjectileInfo(int pid, Bot bot) {
        int id;

        id = server.botlist.indexOf(bot);

        Status stat = (Status) server.statuslist.elementAt(id);
        Projectile ptemp = (Projectile) stat.projectilelist.elementAt(pid);

        Info info = new Info(-1, ptemp.x0, ptemp.y0, 1);
        info.dir = ptemp.dir;
        info.times_hit = ptemp.times_hit;
        info.hitlist = ptemp.hitlist;
        if (!ptemp.isLive) info.health = -1;

        return info;
}

public Vector Scan (double dir, Bot bot) {
	int id;

	id = server.botlist.indexOf(bot);
	updateBot(id);
	server.exec_nextbot(bot);

	Vector temp;

        /* reduce numbers to between 0 - 2PI */
        if (dir > (double) java.lang.Math.PI*2 || dir < (double) -java.lang.Math.PI*2) {
                dir = dir % ((double)java.lang.Math.PI*2);
        }
        if (dir < 0) {
                dir += (double) java.lang.Math.PI*2;
        }

        double x = (double) java.lang.Math.cos(dir);
        double y = (double) java.lang.Math.sin(dir);

        Status stat = (Status) server.statuslist.elementAt(id);
        stat.scandir=dir;
        temp = server.scan(dir, id);

	return temp;
}

/**
 * Does a physics update
 */
private void updateBot (int id) {
        Status stat;
        double dx, dy;
	
        stat = (Status) server.statuslist.elementAt(id);
        stat.fired = false;
        if (stat.gunheat > 0) --stat.gunheat;

	//increase cloak timer
	if (stat.iscloaked) {
		if (stat.cloaktimer<stat.maxcloaktime) { stat.cloaktimer++; }
		else {
			stat.iscloaked = false;
//			server.text.append("bot" + id + "'s cloaktime exceeded, decloaking.\n");
		}
	} else {
		if (stat.cloaktimer>0) { stat.cloaktimer--; }
	}

        /* recharge battery before expending so batter can == 0
         * the following turn */
        /* Since the normal speed is 5.0, recharge by 4.0 */
	if ((stat.battery < stat.maxbattery) && (!stat.iscloaked)) stat.battery += 5;
        /* expend battery if speed > 0 */
        if (stat.speed > 0) {
                /* yeah, I should turn off abs() just to see
                 * who's keen enough to try to recharge batteries
                 * by runnning with a negative speed ;>
                 */
//                stat.battery -= (java.lang.Math.abs(stat.speed)/5);
		stat.battery -= java.lang.Math.abs(stat.speed);
                /* stop movement if battery is drained */
                if (stat.battery <= 0) {
			stat.momentum_x2 = 0;
			stat.momentum_y2 = 0;
			/* create a new force vector */
			stat.force_x = stat.momentum_x2-stat.momentum_x;
			stat.force_y = stat.momentum_y2-stat.momentum_y;
                        double force = server.linedist(0, 0, stat.force_x, stat.force_y);
                        stat.force_x = (double) (stat.force_x/force);
                        stat.force_y = (double) (stat.force_y/force);
			stat.force_x = stat.force_x*stat.deceleration;
			stat.force_y = stat.force_y*stat.deceleration;

			/* old speed2 compatibility */
                        stat.speed2 = 0;
                        stat.battery = 0;
//                        if (stat.iscloaked) server.text.append("bot" + id+"'s battery ran out, disengaging cloak\n");
			stat.iscloaked = false;
                }
        }

        /* accel/decel to speed2 */
	if (stat.momentum_x2 != stat.momentum_x) {
		stat.momentum_x += stat.force_x;
                /* "compensate" for over-accelleration */
		if (stat.force_x > 0) {
			if (stat.momentum_x > stat.momentum_x2) stat.momentum_x = stat.momentum_x2;
		} else if (stat.force_x < 0) {
			if (stat.momentum_x < stat.momentum_x2) stat.momentum_x = stat.momentum_x2;
		}
        }
	if  (stat.momentum_y2 != stat.momentum_y) {
		stat.momentum_y += stat.force_y;
		if (stat.force_y > 0) {
			if (stat.momentum_y > stat.momentum_y2) stat.momentum_y = stat.momentum_y2;
		} else if (stat.force_y < 0) {
			if (stat.momentum_y < stat.momentum_y2) stat.momentum_y = stat.momentum_y2;
		}
	}

        /* reset bot stats */
        stat.times_hit = 0;
        stat.times_collided = 0;
        stat.hitlist.removeAllElements();
        stat.collidelist.removeAllElements();

	stat.x1 = stat.x0 + stat.momentum_x;
	stat.y1 = stat.y0 + stat.momentum_y;

	/* a quick hack to maintain compatibility with speed/speed2 */
	stat.speed = server.linedist(0, 0, stat.momentum_x, stat.momentum_y);

	return;
}
}
